HOW TO USE GIT ON MAC TERMINAL 

good video that explains it all: 
https://www.youtube.com/watch?v=HVsySz-h9r4

git cheat sheet:
http://ndpsoftware.com/git-cheatsheet.html#loc=workspace;

cd
ls -la -> will show you all the files (including the hidden ones) in the current directory

git —-version
git status 
git init - set the directory first. then use this command to initialize a repository in your directory. so this command initialized the local directory itself as the repo. 
touch .gitignore - create a git ignore file in your repo. 
open .gitignore - open the git ignore file. type the names of files directly into the git ignore file to ignore them. you can check if it worked by using git status command. 
git clone (link to your repository) - to clone an existing repo to your computer
git clone (repo). - the dot at the end will clone all the files from the repo to the computer

git add -A - add all the untracked files to the staging area 
git reset (name of file or folder) - remove files from the staging area 
git reset - remove everything from the staging area, basically undo the git add command

git remote -v
git branch -a -> lists all the branches in the repo, both locally and remotely

git push origin (name of branch)
git merge master
git merge --no-ff test - to merge a branch with the master

AFTER MAKING CHANGES TO YOUR CODE - how to push the changes to the remote repo. first you need to commit changes locally. 
git diff - will show you the differences you made to the code. 
git commit -m”” - write your message within the quotes
git log - tells you details of the commit 
how do you choose which files to commit? - when you add the files to the staging area, on the terminal it will say ‘files to be committed’. then when you do the commit command, you will commit those files. 
HOW TO PUSH
git pull origin master - when working with other people, this command will show all the differences made by other people since your last pull. 
git push origin master - push your changes to the branch. 


ADD, COMMIT THEN PUSH. 

BRANCHING
git branch - tells you which branch you are in 
bit branch name_of_branch - this creates a new branch
git checkout name_of_branch - switches to this branch
git push -u origin name_of_branch - just creating a new branch isn’t enough to see the changes on GitHub. you need to push them like you push the code. this command allows to push the new branch into github. 
git branch -a -> this allows to see all the branches 

MERGE A BRANCH WITH MASTER
git branch --merged -> this tells you which branches have been merged with the master branch 
git merge name_of_branch -> this will merge the branch you type in with the branch you are already in. if you are in the master branch, this code will merge the new branch with the master. 
git branch -d name_of_branch -> this will delete the branch LOCALLY, but if you pushed the branch to the remote repo, it will still remain there. use this code to delete a branch from the remote repo:
git push origin —-delete name_of_branch -> delete a branch from the remote repository