NUMPY COMMANDS

numpy axis
axis 0: runs down the rows
axis 1: rusn across the coloumns 

when you do np.sum(np_array_2d, axis = 0), this function will collapse the rows. makes sense, axis 0 rowlardan asagi iniyor. onlari ekliyorsun. yani coloumnlari eklemis oluyorsun aslinda. 
axis = 1 dersen colounmlari collapse et. yani so9oldan saga ekle, yaz. 

np.random.random((a * a))
gives a * a array with float 

np.random.randint(low = 10, high = 30, size = 6)
np.random.randint(10,30, 6)
these two are the same thing
gives a 1D array with 6 values, min max indicated

xmin, xmax = x.min(), x.max()
finds the min and max values in an array 

x = np.random.rand(10, 4)
print("Original array: ")
print(x)
y= x[:5, :]
print("First 5 rows of the above array:")
print(y)

x = np.arange(10)
creates a 1D array with numbers from 1 to 10, in the correct order

x = np.arange(2, 10)
same as above, only with numbers from 2 to 9. 2 is inclusive, 10 is not.

x = np.arange(2, 10, 13)

(np.random.permutation(100))
randomly permutate the numbers from 1 to 100, 100 noty included

np.allclose(x, y)
tests if the two arrays (x and y) are the same. 

np.random.random(8)
create a random array of size 8 

np.random.uniform(0, 10)
draws a random sample from this uniform distribution. float

NOTYE:
you can connect two codes with a dot in between. for ex: 
np.arange(1, 7).reshape(3,2)

np.transpose(x)
coloumn ve rowlarin yerini degistiriyotr. coloumn row oluyor, bve vice versa. 

x.flatten(order = 'C')
row ve columnlardan olusan bir arrayi flatten etmeye yariyor. 'C' oldugunda row row gidip onlari yan yana siraliyor. ilk rowdan basla, sonra hep soldan saga devam et. F yazdiginda aynini yapiyor, ama bu kez coloumnlari flatten ediyor. once en soldan basliyor, yukarixan asagi siraliyor sayilari. sonra bir sagdaki coloumna geciup ordaki sayilari yukaridan asagi bir onceki coloumnun yanina ekliyor. 

>>> a = np.array([[1, 2], [3, 4]])
>>> b = np.array([[5, 6]])
>>> np.concatenate((a, b), axis=0)
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> np.concatenate((a, b.T), axis=1)
array([[1, 2, 5],
       [3, 4, 6]])
>>> np.concatenate((a, b), axis=None)
array([1, 2, 3, 4, 5, 6])

np.random.choice -> creates a random 1D array. 
ilk says: range
ikinci sayi: size. mesela 10 ise 10 element oluyor arrayde. 
replace = false olunca ayni sayilari tekrar etmiyor 

GGOD TIP: 
np.random.uniform 
np.random.normal 

they each pick a random numbers from a distribution. each number is equally likely to be chosen in the uniform one. they are not equally likely in the normal distribution. 

